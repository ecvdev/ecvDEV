@model ecvAdminUI.ViewModels.Vendors.VendorViewModel

@using ecvLib.Core
@using ecvLib.Core.HtmlHelpers

@{
    Layout = "~/Views/Shared/_Layout.cshtml";
}

@{ bool isReadonly = false;}
@{ string submitAction = "";}

@{string _Title = ""; }

@if (Model.operationType == ecvLib.Core.ecvOperationStatus.ecvOperationStatus.OperationType.New)
{
    isReadonly = false;
    _Title = "Create New Vendor";
    submitAction = "SaveNew";
}
else if (Model.operationType == ecvLib.Core.ecvOperationStatus.ecvOperationStatus.OperationType.Edit)
{
    isReadonly = false;
    _Title = "Edit Vendor Details";
    submitAction = "SaveEdit";
}
else if (Model.operationType == ecvLib.Core.ecvOperationStatus.ecvOperationStatus.OperationType.Detail)
{
    isReadonly = true;
    _Title = "Display Vendor Details";
    submitAction = "Details";
}
else if (Model.operationType == ecvLib.Core.ecvOperationStatus.ecvOperationStatus.OperationType.Delete)
{
    isReadonly = true;
    _Title = "Delete Vendor Details";
    submitAction = "DeleteConfirmed";
}

<div class="col-sm-9 col-sm-offset-3 col-md-10 col-md-offset-2 main">
    @using (Html.BeginForm(submitAction, "Vendor", FormMethod.Post, new { enctype = "multipart/form-data" }))
    {
    @Html.AntiForgeryToken()

    <div class="form-horizontal">
        <h4> @_Title : @Model.vendorModel.Name</h4>
        <fieldset>
            <div>
                <table style="width:100%">
                    <tbody>
                        <tr>
                            <td style="width:50%">
                                <div>
                                    @Html.ActionLink("Back to List", "List")
                                </div>
                            </td>

                            @if (Model.operationType == ecvLib.Core.ecvOperationStatus.ecvOperationStatus.OperationType.New || Model.operationType == ecvLib.Core.ecvOperationStatus.ecvOperationStatus.OperationType.Edit)
                            {
                                <td style="width:50%; float:right">
                                    <div class="form-group">
                                        <div class="col-md-offset-2 col-md-10">
                                            <input type="submit" value="Save" class="btn btn-default" />
                                        </div>
                                    </div>
                                </td>
                            }
                            else if (Model.operationType == ecvLib.Core.ecvOperationStatus.ecvOperationStatus.OperationType.Detail || Model.operationType == ecvLib.Core.ecvOperationStatus.ecvOperationStatus.OperationType.Delete)
                            {
                                <td style="width:50%; float:none">
                                    <div class="form-group">
                                        <div class="col-md-offset-2 col-md-10">

                                            @if (Model.operationType == ecvLib.Core.ecvOperationStatus.ecvOperationStatus.OperationType.Detail)
                                            {
                                                @Html.ActionLink("Edit", "Edit", new { vendorID = @Model.vendorModel.Id })
                                                <span>   </span>
                                                @Html.ActionLink("Delete", "Delete", new { vendorID = @Model.vendorModel.Id })
                                            }
                                            else if (Model.operationType == ecvLib.Core.ecvOperationStatus.ecvOperationStatus.OperationType.Delete)
                                            {
                                                <p class="label label-danger">Do you want to delete this record?</p>
                                                <input type="submit" value="Yes" class="btn btn-link" />
                                            }
                                        </div>
                                    </div>
                                </td>
                            }

                        </tr>

                    </tbody>
                </table>

            </div>
            <hr />

            @Html.ValidationSummary(false, "", new { @class = "text-danger" })
            @Html.HiddenFor(model => model.vendorModel.Id)

            <ul class="nav nav-tabs">
                <li class="active"><a href="#tabVendorInfo" data-toggle="tab">Vendor Info</a></li>
                <li><a href="#tabSEO" data-toggle="tab">SEO</a></li>
                <li><a href="#tabProducts" data-toggle="tab">Products</a></li>
            </ul>

            <div id="myTabContent" class="tab-content">
                <div class="tab-pane fade active in" id="tabVendorInfo">
                    <br />

                    <div class="form-group">
                        @Html.LabelFor(model => model.vendorModel.StoreID, htmlAttributes: new { @class = "control-label col-md-3" })
                        <div class="col-md-8">
                            @Html.EditorFor(model => model.vendorModel.StoreID, new { htmlAttributes = new { @class = "form-control" } }).readonlyControl(() => isReadonly == true)
                            @Html.ValidationMessageFor(model => model.vendorModel.StoreID, "", new { @class = "text-danger" })
                        </div>
                    </div>

                    <div class="form-group">
                        @Html.LabelFor(model => model.vendorModel.Code, htmlAttributes: new { @class = "control-label col-md-3" })
                        <div class="col-md-8">
                            @Html.EditorFor(model => model.vendorModel.Code, new { htmlAttributes = new { @class = "form-control" } }).readonlyControl(() => isReadonly == true)
                            @Html.ValidationMessageFor(model => model.vendorModel.Code, "", new { @class = "text-danger" })
                        </div>
                    </div>

                    <div class="form-group">
                        @Html.LabelFor(model => model.vendorModel.Name, htmlAttributes: new { @class = "control-label col-md-3" })
                        <div class="col-md-8">
                            @Html.EditorFor(model => model.vendorModel.Name, new { htmlAttributes = new { @class = "form-control" } }).readonlyControl(() => isReadonly == true)
                            @Html.ValidationMessageFor(model => model.vendorModel.Name, "", new { @class = "text-danger" })
                        </div>
                    </div>

                    <div class="form-group">
                        @Html.LabelFor(model => model.vendorModel.Email, htmlAttributes: new { @class = "control-label col-md-3" })
                        <div class="col-md-8">
                            @Html.EditorFor(model => model.vendorModel.Email, new { htmlAttributes = new { @class = "form-control" } }).readonlyControl(() => isReadonly == true)
                            @Html.ValidationMessageFor(model => model.vendorModel.Email, "", new { @class = "text-danger" })
                        </div>
                    </div>

                    <div class="form-group">
                        @Html.LabelFor(model => model.vendorModel.Description, htmlAttributes: new { @class = "control-label col-md-3" })
                        <div class="col-md-8">
                            @Html.EditorFor(model => model.vendorModel.Description, new { htmlAttributes = new { @class = "form-control" } }).readonlyControl(() => isReadonly == true)
                            @Html.ValidationMessageFor(model => model.vendorModel.Description, "", new { @class = "text-danger" })
                        </div>
                    </div>

                    <div class="form-group">
                        @Html.LabelFor(model => model.vendorModel.PictureId, htmlAttributes: new { @class = "control-label col-md-3" })
                        <div class="col-md-8">
                            @Html.EditorFor(model => model.vendorModel.PictureId, new { htmlAttributes = new { @class = "form-control" } }).readonlyControl(() => isReadonly == true)
                            @Html.ValidationMessageFor(model => model.vendorModel.PictureId, "", new { @class = "text-danger" })
                        </div>
                    </div>

                    <div class="form-group">
                        @Html.LabelFor(model => model.vendorModel.AddressId, htmlAttributes: new { @class = "control-label col-md-3" })
                        <div class="col-md-8">
                            @Html.EditorFor(model => model.vendorModel.AddressId, new { htmlAttributes = new { @class = "form-control" } }).readonlyControl(() => isReadonly == true)
                            @Html.ValidationMessageFor(model => model.vendorModel.AddressId, "", new { @class = "text-danger" })
                        </div>
                    </div>

                    <div class="form-group">
                        @Html.LabelFor(model => model.vendorModel.AdminComment, htmlAttributes: new { @class = "control-label col-md-3" })
                        <div class="col-md-8">
                            @Html.EditorFor(model => model.vendorModel.AdminComment, new { htmlAttributes = new { @class = "form-control" } }).readonlyControl(() => isReadonly == true)
                            @Html.ValidationMessageFor(model => model.vendorModel.AdminComment, "", new { @class = "text-danger" })
                        </div>
                    </div>

                    <div class="form-group">
                        @Html.LabelFor(model => model.vendorModel.Active, htmlAttributes: new { @class = "control-label col-md-3" })
                        <div class="col-md-8">
                            <div class="checkbox">
                                @Html.EditorFor(model => model.vendorModel.Active).disableControl(() => isReadonly == true)
                                @Html.ValidationMessageFor(model => model.vendorModel.Active, "", new { @class = "text-danger" })
                            </div>
                        </div>
                    </div>

                    <div class="form-group">
                        @Html.LabelFor(model => model.vendorModel.Deleted, htmlAttributes: new { @class = "control-label col-md-3" })
                        <div class="col-md-8">
                            <div class="checkbox">
                                @Html.EditorFor(model => model.vendorModel.Deleted).disableControl(() => isReadonly == true)
                                @Html.ValidationMessageFor(model => model.vendorModel.Deleted, "", new { @class = "text-danger" })
                            </div>
                        </div>
                    </div>

                    <div class="form-group">
                        @Html.LabelFor(model => model.vendorModel.DisplayOrder, htmlAttributes: new { @class = "control-label col-md-3" })
                        <div class="col-md-8">
                            @Html.EditorFor(model => model.vendorModel.DisplayOrder, new { htmlAttributes = new { @class = "form-control" } }).readonlyControl(() => isReadonly == true)
                            @Html.ValidationMessageFor(model => model.vendorModel.DisplayOrder, "", new { @class = "text-danger" })
                        </div>
                    </div>

                    <div class="form-group">
                        @Html.LabelFor(model => model.vendorModel.AllowCustomersToSelectPageSize, htmlAttributes: new { @class = "control-label col-md-3" })
                        <div class="col-md-8">
                            <div class="checkbox">
                                @Html.EditorFor(model => model.vendorModel.AllowCustomersToSelectPageSize).disableControl(() => isReadonly == true)
                                @Html.ValidationMessageFor(model => model.vendorModel.AllowCustomersToSelectPageSize, "", new { @class = "text-danger" })
                            </div>
                        </div>
                    </div>

                    <div class="form-group" id="divPageSizeOptions">
                        @Html.LabelFor(model => model.vendorModel.PageSizeOptions, htmlAttributes: new { @class = "control-label col-md-3" })
                        <div class="col-md-8">
                            @Html.EditorFor(model => model.vendorModel.PageSizeOptions, new { htmlAttributes = new { @class = "form-control" } }).readonlyControl(() => isReadonly == true)
                            @Html.ValidationMessageFor(model => model.vendorModel.PageSizeOptions, "", new { @class = "text-danger" })
                        </div>
                    </div>

                    <div class="form-group" id="divPageSize" style="display:none">
                        @Html.LabelFor(model => model.vendorModel.PageSize, htmlAttributes: new { @class = "control-label col-md-3" })
                        <div class="col-md-8">
                            @Html.EditorFor(model => model.vendorModel.PageSize, new { htmlAttributes = new { @class = "form-control" } }).readonlyControl(() => isReadonly == true)
                            @Html.ValidationMessageFor(model => model.vendorModel.PageSize, "", new { @class = "text-danger" })
                        </div>
                    </div>

                    <div class="form-group">
                        @Html.LabelFor(model => model.vendorModel.CreatedOnUtc, htmlAttributes: new { @class = "control-label col-md-3" })
                        <div class="col-md-8">
                            @Html.EditorFor(model => model.vendorModel.CreatedOnUtc, new { htmlAttributes = new { @class = "form-control", @readonly = "readonly" } })
                            @Html.ValidationMessageFor(model => model.vendorModel.CreatedOnUtc, "", new { @class = "text-danger" })
                        </div>
                    </div>

                    <div class="form-group">
                        @Html.LabelFor(model => model.vendorModel.UpdatedOnUtc, htmlAttributes: new { @class = "control-label col-md-3" })
                        <div class="col-md-8">
                            @Html.EditorFor(model => model.vendorModel.UpdatedOnUtc, new { htmlAttributes = new { @class = "form-control", @readonly = "readonly" } })
                            @Html.ValidationMessageFor(model => model.vendorModel.UpdatedOnUtc, "", new { @class = "text-danger" })
                        </div>
                    </div>

                </div> @*End of -- <div class="tab-pane fade active in" id="tabVendorInfo">*@

                <div class="tab-pane fade" id="tabSEO">
                    <br />
                    <div class="form-group">
                        @Html.LabelFor(model => model.vendorModel.MetaKeywords, htmlAttributes: new { @class = "control-label col-md-3" })
                        <div class="col-md-8">
                            @Html.EditorFor(model => model.vendorModel.MetaKeywords, new { htmlAttributes = new { @class = "form-control" } }).readonlyControl(() => isReadonly == true)
                            @Html.ValidationMessageFor(model => model.vendorModel.MetaKeywords, "", new { @class = "text-danger" })
                        </div>
                    </div>

                    <div class="form-group">
                        @Html.LabelFor(model => model.vendorModel.MetaDescription, htmlAttributes: new { @class = "control-label col-md-3" })
                        <div class="col-md-8">
                            @Html.EditorFor(model => model.vendorModel.MetaDescription, new { htmlAttributes = new { @class = "form-control" } }).readonlyControl(() => isReadonly == true)
                            @Html.ValidationMessageFor(model => model.vendorModel.MetaDescription, "", new { @class = "text-danger" })
                        </div>
                    </div>

                    <div class="form-group">
                        @Html.LabelFor(model => model.vendorModel.MetaTitle, htmlAttributes: new { @class = "control-label col-md-3" })
                        <div class="col-md-8">
                            @Html.EditorFor(model => model.vendorModel.MetaTitle, new { htmlAttributes = new { @class = "form-control" } }).readonlyControl(() => isReadonly == true)
                            @Html.ValidationMessageFor(model => model.vendorModel.MetaTitle, "", new { @class = "text-danger" })
                        </div>
                    </div>
                </div> @*End of -- <div class="tab-pane fade active in" id="tabSEO">*@

                <div class="tab-pane fade" id="tabProducts">
                    <h4>In progress...</h4>
                </div>


            </div> @*End of -- <div id="myTabContent" class="tab-content">*@

        </fieldset>

    </div> @*End of -- <div class="form-horizontal">*@
    }
</div>

<script type="text/javascript">

    //--Below script stop form submitting on Enterkey press, still allow enterkey in multi line text area
    $(document).keypress(function (e) {
        if (e.which == 13 && e.target.tagName != 'TEXTAREA') {
            return false;
        }
    });
    //-------

    $(document).ready(function () {

        $('#@Html.IdFor(model => model.vendorModel.AllowCustomersToSelectPageSize)').click(toggleAllowCustomersToSelectPageSize);
        toggleAllowCustomersToSelectPageSize();
    });

    function toggleAllowCustomersToSelectPageSize()
    {
        if ($('#@Html.IdFor(model => model.vendorModel.AllowCustomersToSelectPageSize)').is(':checked'))
        {
            //alert('True');
            $("#divPageSizeOptions").show();
            $("#divPageSize").hide();
        }
        else {
            //alert('False');
            $("#divPageSizeOptions").hide();
            $("#divPageSize").show();
        }

    }// End of -- function toggleAllowCustomersToSelectPageSize()

</script>